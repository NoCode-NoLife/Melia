//--------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: BC_NORMAL.bt
//   Authors: exec, celophi, Salman T. Khan
//   Version: i373230
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//   - i336041: Added short maxPlayers to ZoneTrafficServer struct
//   - i373230: ZoneTraffic.s1+2 added
//------------------------------------------------

#include "inc/common.bt"

typedef struct
{
    short propertiesSize;
    if (propertiesSize > 0) {
        getProperties(propertiesSize);
        int64 id2;
        byte bin2[10];
    }
} BARRACK_PROPERTY <optimize=false>;

typedef struct
{
    APPEARANCE_BARRACK_PC abpc;
    BARRACK_PROPERTY properties[19];
    byte b1;
    byte b2;
    byte b3;
    byte b4;
    // maybe job history?
    short jobIdCount;
    short jobIds[jobIdCount];
    
    int i1;
    int i2;
    int64 characterId;
    short s2;
    if (s2 > 0) {
        lpString lpS1;
        lpString lpS2;
        lpString lpS3;
        lpString lpS4;
    }
}
BARRACK_PC <read=readBARRACK_PC>;

string readBARRACK_PC(BARRACK_PC &v)
{
    return v.abpc.appearancePc.name;
}

ServerHeaderDynamic header;

int type;
switch(type)
{
    case 0x00:
        int64 accountId1;
        int64 accountId2;
        BARRACK_PC barrackPc[1] <optimize=false>;
        break;
    // Set Position
	// Notifies the client that the server successfully set the barrack
	// position for an actor.
	case 0x02:
        int64 accountId;
		byte barrackIndex;
		position pos;
        break;

    // Set Pet Position
	// Notifies the client that the server successfully set the barrack
	// position for a companion.
    case 0x03:
        int64 accountId;
        int64 petId;
		position pos;
        break;
		
    case 0x05:
        int64 accountId;
        int barrackMapId; // ? matches id, but doesn't seem to work
        byte bin1[5];
        break;
		
    case 0x08:
		int64 accountId;
		int i1;
        break;

    // Companion Packet
    case 0x09:
        int64 accountId;
		int count;
        PetInfo pets[count];
        int count2;
        break;

    // Response to CB_PET_PC
    case 0x0A:
        int64 accountId;
        int64 petId;
        int64 characterId;
        break;

    // Response to CB_PET_COMMAND (Delete)
    case 0x0B:
        int64 accountId;
        int64 petId;
        break;

    // New Team UI Packet?
	// Updates the client UI with character slots, team experience,
	// names, etc.
    case 0x0C:
        int64 accountId;
        short purchasedBarrackSlots; //  0
		int teamExp; // 26
		short characterCount; // 2
        break;
		
	// Zone traffic
    case 0x0D:
        typedef struct
        {
            short zone;
            short playerCount;
            short maxPlayerCount;
        }
        ZoneTrafficServer <optimize=false>;
        
        typedef struct
        {
            short mapId;
            short zoneServerCount;
            ZoneTrafficServer servers [zoneServerCount];
        }
        ZoneTrafficMap <optimize=false>;
        
        typedef struct
        {
            short s1;
            short s2;
            short maxPlayerCount;
            short mapCount;
            ZoneTrafficMap maps [mapCount];
        }
        ZoneTraffic <optimize=false>;
        
        if (!checkCompression())
            ZoneTraffic traffic;
        break;

    // Enable packets from client to barrack.
    // (CB packets are disabled normally after connecting to the zone server.)
    case 0x0E:
        int i1; // 1350001
        break;
        
    // Enable packets from client to barrack.
    // (CB packets are disabled normally after connecting to the zone server.)
    case 0x0F:
        break;
		
	// Run lua function
    case 0x10:
        lpString function; // ? (THEMA_BUY_SUCCESS)
        break;
		
    // Message Box
    case 0x11:
        if (!checkCompression())
        {
            byte page;
            byte isLoadingFinished;
            byte gap1[3];
            int messageCount;
            int totalMessageCount;
            if (messageCount != 0)
                PostMessage messages[messageCount] <optimize=false>;
        }
        break;

    // PostBox State
    case 0x13:
        int64 messageId;
        PostBoxState state;
        break;

    // Message Box item update
    case 0x14:
        int64 messageId;
        byte b1; // 1
        int i1; // 7
        int itemCount; // 20
        if (itemCount != 0)
            PostMessageItem items[itemCount] <optimize=false>;
        break;
		
	// Login queue
    case 0x15:
        int currentPosition;
        break;

    // Client integrity check failure.
    // The client will respond with CB_CLIENT_INTEGRITY_FAIL
    case 0x18:
        break;

    // Update the number of purchased character slots in the barrack.
    case 0x19:
        int count;
        break;

    // Nexon Game Security Callback.
    case 0x1A:
        break;

    case 0x1C:
        typedef struct
        {
            int64 characterId;
            char characterName[64];
            char bin[24];
        }
        CharacterInfo <optimize=false>;
        int64 accountId;
        int characterCount;
        CharacterInfo characters[characterCount];
        break;
}
