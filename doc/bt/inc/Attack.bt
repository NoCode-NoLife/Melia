//--------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: Attack.bt
//   Authors: exec, Salman T. Khan
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

// This struct appears in various packets, such as ZC_SKILL_HIT_INFO
// and ZC_HIT_INFO. As of i373766 it's 24 bytes in size. It's structure
// should be correct, though it's unknown which bytes might be padding.
typedef struct
{
	int damage;
	int hp;
	int i1;
	short s1;

    byte b1;
    byte b2;
	byte b5;
	byte b6;

	short resultType;

    byte b3;
    byte b4;
    byte b7;
    byte b8;
}
HitInfo;

typedef struct
{
    byte type;
    
    switch(type)
    {
        // Seen with hitting two targets with
        // one energy bolt and double attack.
        case 0:
            int i1;
            
            // This byte and int combo is guessed, but without it
            // this variable info array approach doesn't work.
            byte b1;
            int i2;
            break;

        case 1:
            int i1;
            break;

        case 2:
            int i1;
            byte b1;
            break;
    
        // Part of many packets. Weirdly, the float
        // is often times negative, but it is always
        // a valid float.
        case 3:
            float f1;
            break;
    }
}
VariableHitInfo <optimize=false, read=readVariableHitInfo>;

string readVariableHitInfo(VariableHitInfo &val)
{
    string result;
    SPrintf(result, "Type: %d", val.type);
    return result;
}

typedef struct (int size)
{
    short op <hidden=true>;
    FSeek(FTell() - 2);
    
    byte buffer[size];
}
AdditionalPacket <optimize=false, read=readAdditionalPacket>;

string readAdditionalPacket(AdditionalPacket &val)
{
    string result;
    SPrintf(result, "Op: 0x%04X, Size: %d", val.op, sizeof(val.buffer));
    return result;
}

// Every SkillHitInfo appears to contain information about one hit
// that happened on a target. Unfortunately its structure is flexible,
// which makes analysis pretty difficult. Most of this data is guessed.
typedef struct
{
	byte b9;
	byte b10; // 4 = hands/sword? 9 = magic? 102 = dagger, 103 = Onion attack, potentially related to AttackType.Aries/Strike in skill attributes
    byte b1;
    byte b2;

	int targetHandle;
    HitInfo hitInfo;
	
	int i1;
	short damageDelay;
	byte b4;

	byte b5;
    short skillHitDelay;
	byte b6;
	byte b7;
	int i2;
	int i3; // weird id-looking int I can't find anywhere in the data
    short s1;
    short s2;

	short additionalPacketSize;
	byte varInfoCount;
	byte b8;

    if (additionalPacketSize > 0)
        AdditionalPacket additionalPacket(additionalPacketSize);
    
    if (varInfoCount > 0)
        VariableHitInfo varInfo[varInfoCount];
}
SkillHitInfo <optimize=false, read=readSkillHitInfo>;

string readSkillHitInfo(SkillHitInfo& val)
{
    string result;
    SPrintf(result, "Target: %d, Damage: %d", val.targetHandle, val.hitInfo.damage);
    return result;
}

/*typedef struct
{
    byte type;
    switch(type)
    {
        // Seen with hitting two targets with
        // one energy bolt.
        case 0:
            int i1;
            byte b1;
            int i2;
            break;

        case 3:
            float val; 
            break;
    
        default:
            int val;
            break;
    }
}
AttackItem1 <optimize=false>;

typedef struct
{
    int i1;
    int targetHandle;

    int damage;
    int hpLeft;
    int i2;
    short s7;
    short s8;

    short s1;
    short s2;
    short s3;
    short s4;

    int i4; // 50 on Magic Missiles
    short s13;
    byte b11;
    byte b12;
    short skillHitDelay;
    short s5;
    int attackId; //?
    int i6;
    short s6;

    // This wasn't really working for me, back
    // to the drawing board. When guessing data,
    // we should make notes.

    //if (s6 > 0) {
    //    short s6;
    //    int64 l3;
    //    short s7;
    //    int i7;
    //    byte b2;
    //    float f1;
    //} else {
    //    short s7;
    //    if (s7 > 0) {
    //        short s8;
    //        byte b3;
    //        ushort s9;
    //    }
    //}

    short s11;
    short s12;

    // This looks like a list with variable
    // information to me, though we need more
    // data to confirm this. Works for normal
    // attacks, energy bolts, Earthquake, and
    // several other "normal" skills.
    short s10;
    
    // Seen with Magic Missile
    if (s12 > 0)
        byte bin_s12[s12];

    if (s10 > 0)
        AttackItem1 items1[s10];
}
Attack <optimize=false, read=readAttack>;

string readAttack(Attack& val)
{
    string result;
    SPrintf(result, "Target: %d, Damage: %d", val.targetHandle, val.damage);
    return result;
}*/
