//--------------------------------------
//--- 010 Editor v6.0.2 Binary Template
//
// File: common.bt
// Author: exec
// Revision:
// Purpose:
//--------------------------------------

// [i11025 (2016-02-26)] 20->21, Hair slot?
const int EquipSlotCount = 21;

// Length-prefixed string
typedef struct
{
    short length;
    if(length > 0)
        char text[length];
}
lpString <read=lpStringRead>;

string lpStringRead(lpString &v)
{
    if(v.length > 0)
        return v.text;
    else
        return "";
}

// Key:Value type with two length-prefixed strings
typedef struct
{
    lpString key;
    lpString value;
}
msgParameter <read=msgParameterRead>;

string msgParameterRead(msgParameter &v)
{
    return v.key.text + " : " + v.value.text;
}

// Position in 3D space
typedef struct
{
    float x;
    float y;
    float z;
}
position <read=positionRead>;

string positionRead(position &v)
{
    local string result;
    SPrintf(result, "X: %f, Y: %f, Z: %f", v.x, v.y, v.z);
    return result;
}

// 2D direction
typedef struct
{
    float x;
    float y;
}
direction <read=directionRead>;

string directionRead(direction &v)
{
    local string result;
    SPrintf(result, "X: %f, Y: %f", v.x, v.y);
    return result;
}

// Map data used in revealing
typedef struct
{
    int mapId;
    byte data[132];
}
mapRevealData <read=mapRevealDataRead>;

string mapRevealDataRead(mapRevealData &v)
{
    local string result;
    SPrintf(result, "%d", v.mapId);
    return result;
}

typedef struct
{
    char name[65];
    char teamName[64];
    byte bin[7];
    int64 accountId;
    short stance;
    short s1;
    short job;
    byte gender;
    byte b1;
    int level;
    int equipIds[EquipSlotCount];
    int i6; // [i10671, 2015-10-26 iCBT2]
    int i7; // [i10671, 2015-10-26 iCBT2]
    short hair;
    short pose;

    int i8; // [i11025 (2016-02-26)]
}
COMMANDER;

typedef struct
{
    int monsterId;
    int i1;
    int maxHp;

    // [i11025 (2016-02-26)] Removed?
    //short s1;
    //short s2;

    int level;
    float sdr;
    byte b1;
    byte bin2[3];
}
MONSTER;

typedef struct
{
    COMMANDER commander;

    int64 characterId;

    // [i11025 (2016-02-26)]
    // Index was previously stored as a short, now there seem
    // to be two byte, with the first being the index.
    byte index;
    byte b1;

    short mapId;
    int i1;
    int i2;
    int i3; // max xp?
    int i4;

    float x;
    float y;
    float z;
    float d1; // direction?
    float d2; // direction?

    float x2;
    float y2;
    float z2;
    float d12;
    float d22;

    int i5;
}
Character;

typedef struct
{
    ubyte b1;
    ubyte b2;
    ubyte b3;
    ubyte b4;
}
IP <read=IPRead>;

string IPRead(IP &v)
{
    local string result;
    SPrintf(result, "%d.%d.%d.%d", v.b1, v.b2, v.b3, v.b4);
    return result;
}

typedef struct
{
    int id;
    short propertiesSize;
    short b1;
    int64 worldId;
    int amount;
    int price;
    int index;
    int i1;
    if (propertiesSize > 0)
        byte properties[propertiesSize];
}
Item;

string ItemRead(Item &v)
{
    local string result;
    SPrintf(result, "%d", v.id);
    return result;
}

typedef struct
{
    int id;
    short propertiesSize;
    short b1;
    int64 worldId;
    byte slot;
    byte bin1[3];
    int i1;
    if (propertiesSize > 0)
        byte properties[propertiesSize];
}
EquipItem;

string EquipItemRead(EquipItem &v)
{
    local string result;
    SPrintf(result, "%d : %d", v.slot, v.id);
    return result;
}
